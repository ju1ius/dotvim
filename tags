<C-R>	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^noremap <buffer><silent> <C-R> <C-R>:JSLintUpdate<CR>$/;"	m
<C-R>	ftplugin/javascript/jslint.vim	/^noremap <buffer><silent> <C-R> <C-R>:JSLintUpdate<CR>$/;"	m
ActivateJSLintQuickFixWindow	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^    function s:ActivateJSLintQuickFixWindow()$/;"	f
ActivateJSLintQuickFixWindow	ftplugin/javascript/jslint.vim	/^    function s:ActivateJSLintQuickFixWindow()$/;"	f
GetJSLintMessage	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  function s:GetJSLintMessage()$/;"	f
GetJSLintMessage	ftplugin/javascript/jslint.vim	/^  function s:GetJSLintMessage()$/;"	f
GetQuickFixStackCount	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^    function s:GetQuickFixStackCount()$/;"	f
GetQuickFixStackCount	ftplugin/javascript/jslint.vim	/^    function s:GetQuickFixStackCount()$/;"	f
GetScreenSessions	bundle/screen/autoload/screen.vim	/^function! s:GetScreenSessions()$/;"	f
GetSize	bundle/screen/autoload/screen.vim	/^function! s:GetSize()$/;"	f
GetTerminal	bundle/screen/autoload/screen.vim	/^function! s:GetTerminal()$/;"	f
JSLint	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^function! s:JSLint()$/;"	f
JSLint	ftplugin/javascript/jslint.vim	/^function! s:JSLint()$/;"	f
JSLintClear	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^function! s:JSLintClear()$/;"	f
JSLintClear	ftplugin/javascript/jslint.vim	/^function! s:JSLintClear()$/;"	f
JSLintToggle	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  command JSLintToggle :let b:jslint_disabled = exists('b:jslint_disabled') ? b:jslint_disabled ? 0 : 1 : 1$/;"	c
JSLintToggle	ftplugin/javascript/jslint.vim	/^  command JSLintToggle :let b:jslint_disabled = exists('b:jslint_disabled') ? b:jslint_disabled ? 0 : 1 : 1$/;"	c
JSLintUpdate	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  command JSLintUpdate :call s:JSLintUpdate()$/;"	c
JSLintUpdate	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  function s:JSLintUpdate()$/;"	f
JSLintUpdate	ftplugin/javascript/jslint.vim	/^  command JSLintUpdate :call s:JSLintUpdate()$/;"	c
JSLintUpdate	ftplugin/javascript/jslint.vim	/^  function s:JSLintUpdate()$/;"	f
MacGuiCmd	bundle/screen/autoload/screen.vim	/^function! s:MacGuiCmd(cmd, term)$/;"	f
ScreenBootstrap	bundle/screen/autoload/screen.vim	/^function! s:ScreenBootstrap(cmd)$/;"	f
ScreenCmdName	bundle/screen/autoload/screen.vim	/^function! s:ScreenCmdName(cmd)$/;"	f
ScreenFocus	bundle/screen/autoload/screen.vim	/^function! s:ScreenFocus()$/;"	f
ScreenFocusFuncRef	bundle/screen/autoload/screen.vim	/^function! s:ScreenFocusFuncRef()$/;"	f
ScreenInit	bundle/screen/autoload/screen.vim	/^function! s:ScreenInit(cmd)$/;"	f
ScreenQuit	bundle/screen/autoload/screen.vim	/^function! s:ScreenQuit(owner, onleave)$/;"	f
ScreenSend	bundle/screen/autoload/screen.vim	/^function! s:ScreenSend(...)$/;"	f
ScreenSendFuncRef	bundle/screen/autoload/screen.vim	/^function! s:ScreenSendFuncRef()$/;"	f
StartTerminal	bundle/screen/autoload/screen.vim	/^function! s:StartTerminal(command)$/;"	f
ValidTerminal	bundle/screen/autoload/screen.vim	/^function! s:ValidTerminal(term)$/;"	f
WideMsg	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  function s:WideMsg(msg)$/;"	f
WideMsg	ftplugin/javascript/jslint.vim	/^  function s:WideMsg(msg)$/;"	f
b:did_jslint_plugin	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  let b:did_jslint_plugin = 1$/;"	v
b:did_jslint_plugin	ftplugin/javascript/jslint.vim	/^  let b:did_jslint_plugin = 1$/;"	v
b:showing_message	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^let b:showing_message = 0$/;"	v
b:showing_message	ftplugin/javascript/jslint.vim	/^let b:showing_message = 0$/;"	v
classes	syntax/php_vimgen.php	/^		$classes = $extension->getClasses();$/;"	v
dd	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^noremap <buffer><silent> dd dd:JSLintUpdate<CR>$/;"	m
dd	ftplugin/javascript/jslint.vim	/^noremap <buffer><silent> dd dd:JSLintUpdate<CR>$/;"	m
dw	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^noremap <buffer><silent> dw dw:JSLintUpdate<CR>$/;"	m
dw	ftplugin/javascript/jslint.vim	/^noremap <buffer><silent> dw dw:JSLintUpdate<CR>$/;"	m
errors	syntax/php_vimgen.php	/^$errors = array();$/;"	v
ext_classes	syntax/php_vimgen.php	/^		$ext_classes = array();$/;"	v
ext_constants	syntax/php_vimgen.php	/^			$ext_constants = array_merge($ext_constants, array_keys($class->getConstants()));$/;"	v
ext_constants	syntax/php_vimgen.php	/^		$ext_constants = array_keys($extension->getConstants());$/;"	v
ext_constants	syntax/php_vimgen.php	/^		$ext_constants = array_unique($ext_constants);$/;"	v
ext_functions	syntax/php_vimgen.php	/^		$ext_functions = array_keys($extension->getFunctions());$/;"	v
ext_info	syntax/php_vimgen.php	/^		$ext_info = array();$/;"	v
extension	syntax/php_vimgen.php	/^		$extension  = new ReflectionExtension($ext);  $/;"	v
extensions	syntax/php_vimgen.php	/^$extensions = array($/;"	v
g:JSLintHighlightErrorLine	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  let g:JSLintHighlightErrorLine = 1$/;"	v
g:JSLintHighlightErrorLine	ftplugin/javascript/jslint.vim	/^  let g:JSLintHighlightErrorLine = 1$/;"	v
out_file	syntax/php_vimgen.php	/^$out_file = '~\/php_vimgen_out.vim'; \/\/ Pick your output file & location.$/;"	v
out_str	syntax/php_vimgen.php	/^$out_str = '';$/;"	v
s:cmd	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^    let s:cmd = "$JS_CMD"$/;"	v
s:cmd	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^    let s:cmd = '\/System\/Library\/Frameworks\/JavaScriptCore.framework\/Resources\/jsc'$/;"	v
s:cmd	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^    let s:cmd = 'js'$/;"	v
s:cmd	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^    let s:cmd = 'nodejs'$/;"	v
s:cmd	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  let s:cmd = 'cscript \/NoLogo '$/;"	v
s:cmd	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^let s:cmd = "cd " . s:plugin_path . " && " . s:cmd . " " . s:plugin_path . "runjslint." . s:runjslint_ext$/;"	v
s:cmd	ftplugin/javascript/jslint.vim	/^    let s:cmd = "$JS_CMD"$/;"	v
s:cmd	ftplugin/javascript/jslint.vim	/^    let s:cmd = '\/System\/Library\/Frameworks\/JavaScriptCore.framework\/Resources\/jsc'$/;"	v
s:cmd	ftplugin/javascript/jslint.vim	/^    let s:cmd = 'js'$/;"	v
s:cmd	ftplugin/javascript/jslint.vim	/^    let s:cmd = 'node'$/;"	v
s:cmd	ftplugin/javascript/jslint.vim	/^  let s:cmd = 'cscript \/NoLogo '$/;"	v
s:cmd	ftplugin/javascript/jslint.vim	/^let s:cmd = "cd " . s:plugin_path . " && " . s:cmd . " " . s:plugin_path . "runjslint." . s:runjslint_ext$/;"	v
s:install_dir	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^let s:install_dir = expand('<sfile>:p:h')$/;"	v
s:install_dir	ftplugin/javascript/jslint.vim	/^let s:install_dir = expand('<sfile>:p:h')$/;"	v
s:jslintrc	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  let s:jslintrc = []$/;"	v
s:jslintrc	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  let s:jslintrc = readfile(s:jslintrc_file)$/;"	v
s:jslintrc	ftplugin/javascript/jslint.vim	/^  let s:jslintrc = []$/;"	v
s:jslintrc	ftplugin/javascript/jslint.vim	/^  let s:jslintrc = readfile(s:jslintrc_file)$/;"	v
s:jslintrc_file	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^let s:jslintrc_file = expand('~\/.jslintrc')$/;"	v
s:jslintrc_file	ftplugin/javascript/jslint.vim	/^let s:jslintrc_file = expand('~\/.jslintrc')$/;"	v
s:plugin_path	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  let s:plugin_path = substitute(s:plugin_path, '\/', '\\', 'g')$/;"	v
s:plugin_path	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^let s:plugin_path = s:install_dir . "\/jslint\/"$/;"	v
s:plugin_path	ftplugin/javascript/jslint.vim	/^  let s:plugin_path = substitute(s:plugin_path, '\/', '\\', 'g')$/;"	v
s:plugin_path	ftplugin/javascript/jslint.vim	/^let s:plugin_path = s:install_dir . "\/jslint\/"$/;"	v
s:runjslint_ext	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  let s:runjslint_ext = 'js'$/;"	v
s:runjslint_ext	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^  let s:runjslint_ext = 'wsf'$/;"	v
s:runjslint_ext	ftplugin/javascript/jslint.vim	/^  let s:runjslint_ext = 'js'$/;"	v
s:runjslint_ext	ftplugin/javascript/jslint.vim	/^  let s:runjslint_ext = 'wsf'$/;"	v
s:save_cpo	bundle/screen/autoload/screen.vim	/^let s:save_cpo=&cpo$/;"	v
s:screenConque	bundle/screen/autoload/screen.vim	/^let s:screenConque = {}$/;"	v
s:screenGnuScreen	bundle/screen/autoload/screen.vim	/^let s:screenGnuScreen = {}$/;"	v
s:screenTmux	bundle/screen/autoload/screen.vim	/^let s:screenTmux = {}$/;"	v
s:terminals	bundle/screen/autoload/screen.vim	/^    let s:terminals = [$/;"	v
s:terminals	bundle/screen/autoload/screen.vim	/^    let s:terminals = ['Terminal.app']$/;"	v
s:terminals	bundle/screen/autoload/screen.vim	/^    let s:terminals = ['bash']$/;"	v
screen#CommandCompleteScreenSessions	bundle/screen/autoload/screen.vim	/^function! screen#CommandCompleteScreenSessions(argLead, cmdLine, cursorPos)$/;"	f
screen#ScreenShell	bundle/screen/autoload/screen.vim	/^function! screen#ScreenShell(cmd, orientation)$/;"	f
screen#ScreenShellAttach	bundle/screen/autoload/screen.vim	/^function! screen#ScreenShellAttach(session)$/;"	f
screen#ScreenShellCommands	bundle/screen/autoload/screen.vim	/^function! screen#ScreenShellCommands()$/;"	f
screenConque.isValid	bundle/screen/autoload/screen.vim	/^function s:screenConque.isValid() dict " {{{$/;"	f
screenConque.openRegion	bundle/screen/autoload/screen.vim	/^function s:screenConque.openRegion(cmd) dict " {{{$/;"	f
screenConque.quit	bundle/screen/autoload/screen.vim	/^function s:screenConque.quit() dict " {{{$/;"	f
screenConque.send	bundle/screen/autoload/screen.vim	/^function s:screenConque.send(value) dict " {{{$/;"	f
screenGnuScreen.attachSession	bundle/screen/autoload/screen.vim	/^function s:screenGnuScreen.attachSession(session) dict " {{{$/;"	f
screenGnuScreen.bootstrap	bundle/screen/autoload/screen.vim	/^function s:screenGnuScreen.bootstrap(server, sessionfile, cmd) dict " {{{$/;"	f
screenGnuScreen.close	bundle/screen/autoload/screen.vim	/^function s:screenGnuScreen.close(type) dict " {{{$/;"	f
screenGnuScreen.exec	bundle/screen/autoload/screen.vim	/^function s:screenGnuScreen.exec(cmd) dict " {{{$/;"	f
screenGnuScreen.focus	bundle/screen/autoload/screen.vim	/^function s:screenGnuScreen.focus() dict " {{{$/;"	f
screenGnuScreen.isValid	bundle/screen/autoload/screen.vim	/^function s:screenGnuScreen.isValid() dict " {{{$/;"	f
screenGnuScreen.newSessionName	bundle/screen/autoload/screen.vim	/^function s:screenGnuScreen.newSessionName() dict " {{{$/;"	f
screenGnuScreen.newTerminal	bundle/screen/autoload/screen.vim	/^function s:screenGnuScreen.newTerminal() dict " {{{$/;"	f
screenGnuScreen.newTerminalMulti	bundle/screen/autoload/screen.vim	/^function s:screenGnuScreen.newTerminalMulti() dict " {{{$/;"	f
screenGnuScreen.newTerminalResume	bundle/screen/autoload/screen.vim	/^function s:screenGnuScreen.newTerminalResume() dict " {{{$/;"	f
screenGnuScreen.newWindow	bundle/screen/autoload/screen.vim	/^function s:screenGnuScreen.newWindow(focus) dict " {{{$/;"	f
screenGnuScreen.openRegion	bundle/screen/autoload/screen.vim	/^function s:screenGnuScreen.openRegion(cmd) dict " {{{$/;"	f
screenGnuScreen.quit	bundle/screen/autoload/screen.vim	/^function s:screenGnuScreen.quit() dict " {{{$/;"	f
screenGnuScreen.send	bundle/screen/autoload/screen.vim	/^function s:screenGnuScreen.send(value) dict " {{{$/;"	f
screenGnuScreen.setTitle	bundle/screen/autoload/screen.vim	/^function s:screenGnuScreen.setTitle() dict " {{{$/;"	f
screenTmux.activePane	bundle/screen/autoload/screen.vim	/^function s:screenTmux.activePane() dict "{{{$/;"	f
screenTmux.attachSession	bundle/screen/autoload/screen.vim	/^function s:screenTmux.attachSession(session) dict " {{{$/;"	f
screenTmux.bootstrap	bundle/screen/autoload/screen.vim	/^function s:screenTmux.bootstrap(server, sessionfile, cmd) dict " {{{$/;"	f
screenTmux.close	bundle/screen/autoload/screen.vim	/^function s:screenTmux.close(type) dict " {{{$/;"	f
screenTmux.exec	bundle/screen/autoload/screen.vim	/^function s:screenTmux.exec(cmd) dict " {{{$/;"	f
screenTmux.focus	bundle/screen/autoload/screen.vim	/^function s:screenTmux.focus() dict " {{{$/;"	f
screenTmux.isValid	bundle/screen/autoload/screen.vim	/^function s:screenTmux.isValid() dict " {{{$/;"	f
screenTmux.newSessionName	bundle/screen/autoload/screen.vim	/^function s:screenTmux.newSessionName() dict " {{{$/;"	f
screenTmux.newTerminal	bundle/screen/autoload/screen.vim	/^function s:screenTmux.newTerminal() dict " {{{$/;"	f
screenTmux.newTerminalResume	bundle/screen/autoload/screen.vim	/^function s:screenTmux.newTerminalResume() dict " {{{$/;"	f
screenTmux.newWindow	bundle/screen/autoload/screen.vim	/^function s:screenTmux.newWindow(focus) dict " {{{$/;"	f
screenTmux.openRegion	bundle/screen/autoload/screen.vim	/^function s:screenTmux.openRegion(cmd) dict " {{{$/;"	f
screenTmux.quit	bundle/screen/autoload/screen.vim	/^function s:screenTmux.quit() dict " {{{$/;"	f
screenTmux.send	bundle/screen/autoload/screen.vim	/^function s:screenTmux.send(value) dict " {{{$/;"	f
screenTmux.setTitle	bundle/screen/autoload/screen.vim	/^function s:screenTmux.setTitle() dict " {{{$/;"	f
store	syntax/php_vimgen.php	/^$store = array();$/;"	v
u	bundle/jslint.vim/ftplugin/javascript/jslint.vim	/^noremap <buffer><silent> u u:JSLintUpdate<CR>$/;"	m
u	ftplugin/javascript/jslint.vim	/^noremap <buffer><silent> u u:JSLintUpdate<CR>$/;"	m
